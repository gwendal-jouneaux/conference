/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* ROOT := rooms=ROOMS papers=PAPERS
* ROOMS := '#' _ 'rooms' ENDLINE* rooms=ROOM*
* ROOM := _ '-' _ name=STRING _ capacite={',' _ value=INT}? ENDLINE*
* PAPERS := '#' _ 'papers' _ ENDLINE* papers=PAPER*
* PAPER := '##' _ paperName=STRING ENDLINE* authors=PERSON* abstract=ABSTRACT? video=VIDEO?
* PERSON := _ '-' _ name=STRING about={_ ',' _ value=STRING _}? homepage={_ ',' _ value=LINK _}? email={_ ',' _ value=EMAIL _}? ENDLINE*
* ABSTRACT := _ '\*abstract\*:' ENDLINE text=MULTISTRING ENDLINE*
* VIDEO := _ '\*video\*:' _ url=LINK ENDLINE*
* EVENTS := '#' _ 'events' _ ENDLINE* events=EVENT*
* EVENT := SimpleEvent | OrganizedEvent | TalkSession
* SimpleEvent := '##' _ eventName=STRING ENDLINE* abstract=ABSTRACT?
* OrganizedEvent := '##' _ '\(' _ eventType=STRING _ '\)' eventName=STRING ENDLINE* organizer={_ '-' _ 'organizer' _ ':' name=STRING ENDLINE*}? abstract=ABSTRACT?
* TalkSession := '##' _ '\[' _ eventType=STRING _ '\]' eventName=STRING ENDLINE* papers={_ '-' _ 'papers' _ ':' paperList={_  paperName=STRING ','}* lastPaper=STRING ENDLINE*}? abstract=ABSTRACT?
* EMAIL := '[a-zA-Z0-9.!#$%&\'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*'
* LINK := 'https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)'
* STRING := '[a-zA-Z0-9][a-zA-Z0-9. ]*'
* MULTISTRING := '([a-zA-Z0-9][a-zA-Z0-9. \t]+\n)*'
* INT := val='[0-9]+'
*         .value = number { return parseInt(this.val); }
* ENDLINE := _ ';|\n'
* _ := '[ \t\r\f]*'
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    ROOT = "ROOT",
    ROOMS = "ROOMS",
    ROOM = "ROOM",
    ROOM_$0 = "ROOM_$0",
    PAPERS = "PAPERS",
    PAPER = "PAPER",
    PERSON = "PERSON",
    PERSON_$0 = "PERSON_$0",
    PERSON_$1 = "PERSON_$1",
    PERSON_$2 = "PERSON_$2",
    ABSTRACT = "ABSTRACT",
    VIDEO = "VIDEO",
    EVENTS = "EVENTS",
    EVENT_1 = "EVENT_1",
    EVENT_2 = "EVENT_2",
    EVENT_3 = "EVENT_3",
    SimpleEvent = "SimpleEvent",
    OrganizedEvent = "OrganizedEvent",
    OrganizedEvent_$0 = "OrganizedEvent_$0",
    TalkSession = "TalkSession",
    TalkSession_$0 = "TalkSession_$0",
    TalkSession_$0_$0 = "TalkSession_$0_$0",
    EMAIL = "EMAIL",
    LINK = "LINK",
    STRING = "STRING",
    MULTISTRING = "MULTISTRING",
    INT = "INT",
    ENDLINE = "ENDLINE",
    _ = "_",
}
export interface ROOT {
    kind: ASTKinds.ROOT;
    rooms: ROOMS;
    papers: PAPERS;
}
export interface ROOMS {
    kind: ASTKinds.ROOMS;
    rooms: ROOM[];
}
export interface ROOM {
    kind: ASTKinds.ROOM;
    name: STRING;
    capacite: Nullable<ROOM_$0>;
}
export interface ROOM_$0 {
    kind: ASTKinds.ROOM_$0;
    value: INT;
}
export interface PAPERS {
    kind: ASTKinds.PAPERS;
    papers: PAPER[];
}
export interface PAPER {
    kind: ASTKinds.PAPER;
    paperName: STRING;
    authors: PERSON[];
    abstract: Nullable<ABSTRACT>;
    video: Nullable<VIDEO>;
}
export interface PERSON {
    kind: ASTKinds.PERSON;
    name: STRING;
    about: Nullable<PERSON_$0>;
    homepage: Nullable<PERSON_$1>;
    email: Nullable<PERSON_$2>;
}
export interface PERSON_$0 {
    kind: ASTKinds.PERSON_$0;
    value: STRING;
}
export interface PERSON_$1 {
    kind: ASTKinds.PERSON_$1;
    value: LINK;
}
export interface PERSON_$2 {
    kind: ASTKinds.PERSON_$2;
    value: EMAIL;
}
export interface ABSTRACT {
    kind: ASTKinds.ABSTRACT;
    text: MULTISTRING;
}
export interface VIDEO {
    kind: ASTKinds.VIDEO;
    url: LINK;
}
export interface EVENTS {
    kind: ASTKinds.EVENTS;
    events: EVENT[];
}
export type EVENT = EVENT_1 | EVENT_2 | EVENT_3;
export type EVENT_1 = SimpleEvent;
export type EVENT_2 = OrganizedEvent;
export type EVENT_3 = TalkSession;
export interface SimpleEvent {
    kind: ASTKinds.SimpleEvent;
    eventName: STRING;
    abstract: Nullable<ABSTRACT>;
}
export interface OrganizedEvent {
    kind: ASTKinds.OrganizedEvent;
    eventType: STRING;
    eventName: STRING;
    organizer: Nullable<OrganizedEvent_$0>;
    abstract: Nullable<ABSTRACT>;
}
export interface OrganizedEvent_$0 {
    kind: ASTKinds.OrganizedEvent_$0;
    name: STRING;
}
export interface TalkSession {
    kind: ASTKinds.TalkSession;
    eventType: STRING;
    eventName: STRING;
    papers: Nullable<TalkSession_$0>;
    abstract: Nullable<ABSTRACT>;
}
export interface TalkSession_$0 {
    kind: ASTKinds.TalkSession_$0;
    paperList: TalkSession_$0_$0[];
    lastPaper: STRING;
}
export interface TalkSession_$0_$0 {
    kind: ASTKinds.TalkSession_$0_$0;
    paperName: STRING;
}
export type EMAIL = string;
export type LINK = string;
export type STRING = string;
export type MULTISTRING = string;
export class INT {
    public kind: ASTKinds.INT = ASTKinds.INT;
    public val: string;
    public value: number;
    constructor(val: string){
        this.val = val;
        this.value = ((): number => {
        return parseInt(this.val);
        })();
    }
}
export interface ENDLINE {
    kind: ASTKinds.ENDLINE;
}
export type _ = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchROOT($$dpth: number, $$cr?: ErrorTracker): Nullable<ROOT> {
        return this.run<ROOT>($$dpth,
            () => {
                let $scope$rooms: Nullable<ROOMS>;
                let $scope$papers: Nullable<PAPERS>;
                let $$res: Nullable<ROOT> = null;
                if (true
                    && ($scope$rooms = this.matchROOMS($$dpth + 1, $$cr)) !== null
                    && ($scope$papers = this.matchPAPERS($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ROOT, rooms: $scope$rooms, papers: $scope$papers};
                }
                return $$res;
            });
    }
    public matchROOMS($$dpth: number, $$cr?: ErrorTracker): Nullable<ROOMS> {
        return this.run<ROOMS>($$dpth,
            () => {
                let $scope$rooms: Nullable<ROOM[]>;
                let $$res: Nullable<ROOMS> = null;
                if (true
                    && this.regexAccept(String.raw`(?:#)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:rooms)`, $$dpth + 1, $$cr) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                    && ($scope$rooms = this.loop<ROOM>(() => this.matchROOM($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.ROOMS, rooms: $scope$rooms};
                }
                return $$res;
            });
    }
    public matchROOM($$dpth: number, $$cr?: ErrorTracker): Nullable<ROOM> {
        return this.run<ROOM>($$dpth,
            () => {
                let $scope$name: Nullable<STRING>;
                let $scope$capacite: Nullable<Nullable<ROOM_$0>>;
                let $$res: Nullable<ROOM> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && (($scope$capacite = this.matchROOM_$0($$dpth + 1, $$cr)) || true)
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.ROOM, name: $scope$name, capacite: $scope$capacite};
                }
                return $$res;
            });
    }
    public matchROOM_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ROOM_$0> {
        return this.run<ROOM_$0>($$dpth,
            () => {
                let $scope$value: Nullable<INT>;
                let $$res: Nullable<ROOM_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchINT($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ROOM_$0, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchPAPERS($$dpth: number, $$cr?: ErrorTracker): Nullable<PAPERS> {
        return this.run<PAPERS>($$dpth,
            () => {
                let $scope$papers: Nullable<PAPER[]>;
                let $$res: Nullable<PAPERS> = null;
                if (true
                    && this.regexAccept(String.raw`(?:#)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:papers)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                    && ($scope$papers = this.loop<PAPER>(() => this.matchPAPER($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.PAPERS, papers: $scope$papers};
                }
                return $$res;
            });
    }
    public matchPAPER($$dpth: number, $$cr?: ErrorTracker): Nullable<PAPER> {
        return this.run<PAPER>($$dpth,
            () => {
                let $scope$paperName: Nullable<STRING>;
                let $scope$authors: Nullable<PERSON[]>;
                let $scope$abstract: Nullable<Nullable<ABSTRACT>>;
                let $scope$video: Nullable<Nullable<VIDEO>>;
                let $$res: Nullable<PAPER> = null;
                if (true
                    && this.regexAccept(String.raw`(?:##)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$paperName = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                    && ($scope$authors = this.loop<PERSON>(() => this.matchPERSON($$dpth + 1, $$cr), true)) !== null
                    && (($scope$abstract = this.matchABSTRACT($$dpth + 1, $$cr)) || true)
                    && (($scope$video = this.matchVIDEO($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.PAPER, paperName: $scope$paperName, authors: $scope$authors, abstract: $scope$abstract, video: $scope$video};
                }
                return $$res;
            });
    }
    public matchPERSON($$dpth: number, $$cr?: ErrorTracker): Nullable<PERSON> {
        return this.run<PERSON>($$dpth,
            () => {
                let $scope$name: Nullable<STRING>;
                let $scope$about: Nullable<Nullable<PERSON_$0>>;
                let $scope$homepage: Nullable<Nullable<PERSON_$1>>;
                let $scope$email: Nullable<Nullable<PERSON_$2>>;
                let $$res: Nullable<PERSON> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && (($scope$about = this.matchPERSON_$0($$dpth + 1, $$cr)) || true)
                    && (($scope$homepage = this.matchPERSON_$1($$dpth + 1, $$cr)) || true)
                    && (($scope$email = this.matchPERSON_$2($$dpth + 1, $$cr)) || true)
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.PERSON, name: $scope$name, about: $scope$about, homepage: $scope$homepage, email: $scope$email};
                }
                return $$res;
            });
    }
    public matchPERSON_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<PERSON_$0> {
        return this.run<PERSON_$0>($$dpth,
            () => {
                let $scope$value: Nullable<STRING>;
                let $$res: Nullable<PERSON_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.PERSON_$0, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchPERSON_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<PERSON_$1> {
        return this.run<PERSON_$1>($$dpth,
            () => {
                let $scope$value: Nullable<LINK>;
                let $$res: Nullable<PERSON_$1> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchLINK($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.PERSON_$1, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchPERSON_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<PERSON_$2> {
        return this.run<PERSON_$2>($$dpth,
            () => {
                let $scope$value: Nullable<EMAIL>;
                let $$res: Nullable<PERSON_$2> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchEMAIL($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.PERSON_$2, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchABSTRACT($$dpth: number, $$cr?: ErrorTracker): Nullable<ABSTRACT> {
        return this.run<ABSTRACT>($$dpth,
            () => {
                let $scope$text: Nullable<MULTISTRING>;
                let $$res: Nullable<ABSTRACT> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\*abstract\*:)`, $$dpth + 1, $$cr) !== null
                    && this.matchENDLINE($$dpth + 1, $$cr) !== null
                    && ($scope$text = this.matchMULTISTRING($$dpth + 1, $$cr)) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.ABSTRACT, text: $scope$text};
                }
                return $$res;
            });
    }
    public matchVIDEO($$dpth: number, $$cr?: ErrorTracker): Nullable<VIDEO> {
        return this.run<VIDEO>($$dpth,
            () => {
                let $scope$url: Nullable<LINK>;
                let $$res: Nullable<VIDEO> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\*video\*:)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$url = this.matchLINK($$dpth + 1, $$cr)) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.VIDEO, url: $scope$url};
                }
                return $$res;
            });
    }
    public matchEVENTS($$dpth: number, $$cr?: ErrorTracker): Nullable<EVENTS> {
        return this.run<EVENTS>($$dpth,
            () => {
                let $scope$events: Nullable<EVENT[]>;
                let $$res: Nullable<EVENTS> = null;
                if (true
                    && this.regexAccept(String.raw`(?:#)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:events)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                    && ($scope$events = this.loop<EVENT>(() => this.matchEVENT($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.EVENTS, events: $scope$events};
                }
                return $$res;
            });
    }
    public matchEVENT($$dpth: number, $$cr?: ErrorTracker): Nullable<EVENT> {
        return this.choice<EVENT>([
            () => this.matchEVENT_1($$dpth + 1, $$cr),
            () => this.matchEVENT_2($$dpth + 1, $$cr),
            () => this.matchEVENT_3($$dpth + 1, $$cr),
        ]);
    }
    public matchEVENT_1($$dpth: number, $$cr?: ErrorTracker): Nullable<EVENT_1> {
        return this.matchSimpleEvent($$dpth + 1, $$cr);
    }
    public matchEVENT_2($$dpth: number, $$cr?: ErrorTracker): Nullable<EVENT_2> {
        return this.matchOrganizedEvent($$dpth + 1, $$cr);
    }
    public matchEVENT_3($$dpth: number, $$cr?: ErrorTracker): Nullable<EVENT_3> {
        return this.matchTalkSession($$dpth + 1, $$cr);
    }
    public matchSimpleEvent($$dpth: number, $$cr?: ErrorTracker): Nullable<SimpleEvent> {
        return this.run<SimpleEvent>($$dpth,
            () => {
                let $scope$eventName: Nullable<STRING>;
                let $scope$abstract: Nullable<Nullable<ABSTRACT>>;
                let $$res: Nullable<SimpleEvent> = null;
                if (true
                    && this.regexAccept(String.raw`(?:##)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$eventName = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                    && (($scope$abstract = this.matchABSTRACT($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.SimpleEvent, eventName: $scope$eventName, abstract: $scope$abstract};
                }
                return $$res;
            });
    }
    public matchOrganizedEvent($$dpth: number, $$cr?: ErrorTracker): Nullable<OrganizedEvent> {
        return this.run<OrganizedEvent>($$dpth,
            () => {
                let $scope$eventType: Nullable<STRING>;
                let $scope$eventName: Nullable<STRING>;
                let $scope$organizer: Nullable<Nullable<OrganizedEvent_$0>>;
                let $scope$abstract: Nullable<Nullable<ABSTRACT>>;
                let $$res: Nullable<OrganizedEvent> = null;
                if (true
                    && this.regexAccept(String.raw`(?:##)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$eventType = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                    && ($scope$eventName = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                    && (($scope$organizer = this.matchOrganizedEvent_$0($$dpth + 1, $$cr)) || true)
                    && (($scope$abstract = this.matchABSTRACT($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.OrganizedEvent, eventType: $scope$eventType, eventName: $scope$eventName, organizer: $scope$organizer, abstract: $scope$abstract};
                }
                return $$res;
            });
    }
    public matchOrganizedEvent_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<OrganizedEvent_$0> {
        return this.run<OrganizedEvent_$0>($$dpth,
            () => {
                let $scope$name: Nullable<STRING>;
                let $$res: Nullable<OrganizedEvent_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:organizer)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.OrganizedEvent_$0, name: $scope$name};
                }
                return $$res;
            });
    }
    public matchTalkSession($$dpth: number, $$cr?: ErrorTracker): Nullable<TalkSession> {
        return this.run<TalkSession>($$dpth,
            () => {
                let $scope$eventType: Nullable<STRING>;
                let $scope$eventName: Nullable<STRING>;
                let $scope$papers: Nullable<Nullable<TalkSession_$0>>;
                let $scope$abstract: Nullable<Nullable<ABSTRACT>>;
                let $$res: Nullable<TalkSession> = null;
                if (true
                    && this.regexAccept(String.raw`(?:##)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\[)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$eventType = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr) !== null
                    && ($scope$eventName = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                    && (($scope$papers = this.matchTalkSession_$0($$dpth + 1, $$cr)) || true)
                    && (($scope$abstract = this.matchABSTRACT($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.TalkSession, eventType: $scope$eventType, eventName: $scope$eventName, papers: $scope$papers, abstract: $scope$abstract};
                }
                return $$res;
            });
    }
    public matchTalkSession_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<TalkSession_$0> {
        return this.run<TalkSession_$0>($$dpth,
            () => {
                let $scope$paperList: Nullable<TalkSession_$0_$0[]>;
                let $scope$lastPaper: Nullable<STRING>;
                let $$res: Nullable<TalkSession_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:papers)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr) !== null
                    && ($scope$paperList = this.loop<TalkSession_$0_$0>(() => this.matchTalkSession_$0_$0($$dpth + 1, $$cr), true)) !== null
                    && ($scope$lastPaper = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.TalkSession_$0, paperList: $scope$paperList, lastPaper: $scope$lastPaper};
                }
                return $$res;
            });
    }
    public matchTalkSession_$0_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<TalkSession_$0_$0> {
        return this.run<TalkSession_$0_$0>($$dpth,
            () => {
                let $scope$paperName: Nullable<STRING>;
                let $$res: Nullable<TalkSession_$0_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$paperName = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.TalkSession_$0_$0, paperName: $scope$paperName};
                }
                return $$res;
            });
    }
    public matchEMAIL($$dpth: number, $$cr?: ErrorTracker): Nullable<EMAIL> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9.!#$%&\'*+/=?^_\`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*)`, $$dpth + 1, $$cr);
    }
    public matchLINK($$dpth: number, $$cr?: ErrorTracker): Nullable<LINK> {
        return this.regexAccept(String.raw`(?:https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*))`, $$dpth + 1, $$cr);
    }
    public matchSTRING($$dpth: number, $$cr?: ErrorTracker): Nullable<STRING> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9][a-zA-Z0-9. ]*)`, $$dpth + 1, $$cr);
    }
    public matchMULTISTRING($$dpth: number, $$cr?: ErrorTracker): Nullable<MULTISTRING> {
        return this.regexAccept(String.raw`(?:([a-zA-Z0-9][a-zA-Z0-9. \t]+\n)*)`, $$dpth + 1, $$cr);
    }
    public matchINT($$dpth: number, $$cr?: ErrorTracker): Nullable<INT> {
        return this.run<INT>($$dpth,
            () => {
                let $scope$val: Nullable<string>;
                let $$res: Nullable<INT> = null;
                if (true
                    && ($scope$val = this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new INT($scope$val);
                }
                return $$res;
            });
    }
    public matchENDLINE($$dpth: number, $$cr?: ErrorTracker): Nullable<ENDLINE> {
        return this.run<ENDLINE>($$dpth,
            () => {
                let $$res: Nullable<ENDLINE> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:;|\n)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ENDLINE, };
                }
                return $$res;
            });
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.regexAccept(String.raw`(?:[ \t\r\f]*)`, $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchROOT(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchROOT(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchROOT(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<ROOT>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}