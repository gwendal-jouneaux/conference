/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* PROGRAM := STATEMENT*
* STATEMENT := ROOMS | PAPERS
* ROOMS := '#' _ 'rooms' ENDLINE ROOM*
* ROOM := _ '-' _ name=STRING _ rhs={',' _ cap=INT}? ENDLINE
* PAPERS := '#' _ 'papers' _ ENDLINE PAPER*
* PAPER := '##' _ paperName=STRING ENDLINE PERSON*
* PERSON := _ '-' _ name=STRING _ OTHERINFO* ENDLINE
* OTHERINFO := ',' info={ABOUT | HOMEPAGE | EMAIL} _
* ABOUT := STRING
* HOMEPAGE := LINK
* EMAIL := LINK
* LINK := '[a-zA-Z0-9.\/?!=\-\+:@]+'
* STRING := val='[a-zA-Z0-9][a-zA-Z0-9.\s]*'
*         .value = string { return this.val; }
* INT := val='[0-9]+'
*         .value = number { return parseInt(this.val); }
* ENDLINE := _ ';|\n'*
* _ := '\s'*
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    PROGRAM = "PROGRAM",
    STATEMENT_1 = "STATEMENT_1",
    STATEMENT_2 = "STATEMENT_2",
    ROOMS = "ROOMS",
    ROOM = "ROOM",
    ROOM_$0 = "ROOM_$0",
    PAPERS = "PAPERS",
    PAPER = "PAPER",
    PERSON = "PERSON",
    OTHERINFO = "OTHERINFO",
    OTHERINFO_$0_1 = "OTHERINFO_$0_1",
    OTHERINFO_$0_2 = "OTHERINFO_$0_2",
    OTHERINFO_$0_3 = "OTHERINFO_$0_3",
    ABOUT = "ABOUT",
    HOMEPAGE = "HOMEPAGE",
    EMAIL = "EMAIL",
    LINK = "LINK",
    STRING = "STRING",
    INT = "INT",
    ENDLINE = "ENDLINE",
    _ = "_",
}
export type PROGRAM = STATEMENT[];
export type STATEMENT = STATEMENT_1 | STATEMENT_2;
export type STATEMENT_1 = ROOMS;
export type STATEMENT_2 = PAPERS;
export interface ROOMS {
    kind: ASTKinds.ROOMS;
}
export interface ROOM {
    kind: ASTKinds.ROOM;
    name: STRING;
    rhs: Nullable<ROOM_$0>;
}
export interface ROOM_$0 {
    kind: ASTKinds.ROOM_$0;
    cap: INT;
}
export interface PAPERS {
    kind: ASTKinds.PAPERS;
}
export interface PAPER {
    kind: ASTKinds.PAPER;
    paperName: STRING;
}
export interface PERSON {
    kind: ASTKinds.PERSON;
    name: STRING;
}
export interface OTHERINFO {
    kind: ASTKinds.OTHERINFO;
    info: OTHERINFO_$0;
}
export type OTHERINFO_$0 = OTHERINFO_$0_1 | OTHERINFO_$0_2 | OTHERINFO_$0_3;
export type OTHERINFO_$0_1 = ABOUT;
export type OTHERINFO_$0_2 = HOMEPAGE;
export type OTHERINFO_$0_3 = EMAIL;
export type ABOUT = STRING;
export type HOMEPAGE = LINK;
export type EMAIL = LINK;
export type LINK = string;
export class STRING {
    public kind: ASTKinds.STRING = ASTKinds.STRING;
    public val: string;
    public value: string;
    constructor(val: string){
        this.val = val;
        this.value = ((): string => {
        return this.val;
        })();
    }
}
export class INT {
    public kind: ASTKinds.INT = ASTKinds.INT;
    public val: string;
    public value: number;
    constructor(val: string){
        this.val = val;
        this.value = ((): number => {
        return parseInt(this.val);
        })();
    }
}
export interface ENDLINE {
    kind: ASTKinds.ENDLINE;
}
export type _ = string[];
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchPROGRAM($$dpth: number, $$cr?: ErrorTracker): Nullable<PROGRAM> {
        return this.loop<STATEMENT>(() => this.matchSTATEMENT($$dpth + 1, $$cr), true);
    }
    public matchSTATEMENT($$dpth: number, $$cr?: ErrorTracker): Nullable<STATEMENT> {
        return this.choice<STATEMENT>([
            () => this.matchSTATEMENT_1($$dpth + 1, $$cr),
            () => this.matchSTATEMENT_2($$dpth + 1, $$cr),
        ]);
    }
    public matchSTATEMENT_1($$dpth: number, $$cr?: ErrorTracker): Nullable<STATEMENT_1> {
        return this.matchROOMS($$dpth + 1, $$cr);
    }
    public matchSTATEMENT_2($$dpth: number, $$cr?: ErrorTracker): Nullable<STATEMENT_2> {
        return this.matchPAPERS($$dpth + 1, $$cr);
    }
    public matchROOMS($$dpth: number, $$cr?: ErrorTracker): Nullable<ROOMS> {
        return this.run<ROOMS>($$dpth,
            () => {
                let $$res: Nullable<ROOMS> = null;
                if (true
                    && this.regexAccept(String.raw`(?:#)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:rooms)`, $$dpth + 1, $$cr) !== null
                    && this.matchENDLINE($$dpth + 1, $$cr) !== null
                    && this.loop<ROOM>(() => this.matchROOM($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.ROOMS, };
                }
                return $$res;
            });
    }
    public matchROOM($$dpth: number, $$cr?: ErrorTracker): Nullable<ROOM> {
        return this.run<ROOM>($$dpth,
            () => {
                let $scope$name: Nullable<STRING>;
                let $scope$rhs: Nullable<Nullable<ROOM_$0>>;
                let $$res: Nullable<ROOM> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && (($scope$rhs = this.matchROOM_$0($$dpth + 1, $$cr)) || true)
                    && this.matchENDLINE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ROOM, name: $scope$name, rhs: $scope$rhs};
                }
                return $$res;
            });
    }
    public matchROOM_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<ROOM_$0> {
        return this.run<ROOM_$0>($$dpth,
            () => {
                let $scope$cap: Nullable<INT>;
                let $$res: Nullable<ROOM_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$cap = this.matchINT($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.ROOM_$0, cap: $scope$cap};
                }
                return $$res;
            });
    }
    public matchPAPERS($$dpth: number, $$cr?: ErrorTracker): Nullable<PAPERS> {
        return this.run<PAPERS>($$dpth,
            () => {
                let $$res: Nullable<PAPERS> = null;
                if (true
                    && this.regexAccept(String.raw`(?:#)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:papers)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.matchENDLINE($$dpth + 1, $$cr) !== null
                    && this.loop<PAPER>(() => this.matchPAPER($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.PAPERS, };
                }
                return $$res;
            });
    }
    public matchPAPER($$dpth: number, $$cr?: ErrorTracker): Nullable<PAPER> {
        return this.run<PAPER>($$dpth,
            () => {
                let $scope$paperName: Nullable<STRING>;
                let $$res: Nullable<PAPER> = null;
                if (true
                    && this.regexAccept(String.raw`(?:##)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$paperName = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.matchENDLINE($$dpth + 1, $$cr) !== null
                    && this.loop<PERSON>(() => this.matchPERSON($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.PAPER, paperName: $scope$paperName};
                }
                return $$res;
            });
    }
    public matchPERSON($$dpth: number, $$cr?: ErrorTracker): Nullable<PERSON> {
        return this.run<PERSON>($$dpth,
            () => {
                let $scope$name: Nullable<STRING>;
                let $$res: Nullable<PERSON> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.loop<OTHERINFO>(() => this.matchOTHERINFO($$dpth + 1, $$cr), true) !== null
                    && this.matchENDLINE($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.PERSON, name: $scope$name};
                }
                return $$res;
            });
    }
    public matchOTHERINFO($$dpth: number, $$cr?: ErrorTracker): Nullable<OTHERINFO> {
        return this.run<OTHERINFO>($$dpth,
            () => {
                let $scope$info: Nullable<OTHERINFO_$0>;
                let $$res: Nullable<OTHERINFO> = null;
                if (true
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && ($scope$info = this.matchOTHERINFO_$0($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.OTHERINFO, info: $scope$info};
                }
                return $$res;
            });
    }
    public matchOTHERINFO_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<OTHERINFO_$0> {
        return this.choice<OTHERINFO_$0>([
            () => this.matchOTHERINFO_$0_1($$dpth + 1, $$cr),
            () => this.matchOTHERINFO_$0_2($$dpth + 1, $$cr),
            () => this.matchOTHERINFO_$0_3($$dpth + 1, $$cr),
        ]);
    }
    public matchOTHERINFO_$0_1($$dpth: number, $$cr?: ErrorTracker): Nullable<OTHERINFO_$0_1> {
        return this.matchABOUT($$dpth + 1, $$cr);
    }
    public matchOTHERINFO_$0_2($$dpth: number, $$cr?: ErrorTracker): Nullable<OTHERINFO_$0_2> {
        return this.matchHOMEPAGE($$dpth + 1, $$cr);
    }
    public matchOTHERINFO_$0_3($$dpth: number, $$cr?: ErrorTracker): Nullable<OTHERINFO_$0_3> {
        return this.matchEMAIL($$dpth + 1, $$cr);
    }
    public matchABOUT($$dpth: number, $$cr?: ErrorTracker): Nullable<ABOUT> {
        return this.matchSTRING($$dpth + 1, $$cr);
    }
    public matchHOMEPAGE($$dpth: number, $$cr?: ErrorTracker): Nullable<HOMEPAGE> {
        return this.matchLINK($$dpth + 1, $$cr);
    }
    public matchEMAIL($$dpth: number, $$cr?: ErrorTracker): Nullable<EMAIL> {
        return this.matchLINK($$dpth + 1, $$cr);
    }
    public matchLINK($$dpth: number, $$cr?: ErrorTracker): Nullable<LINK> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9.\/?!=\-\+:@]+)`, $$dpth + 1, $$cr);
    }
    public matchSTRING($$dpth: number, $$cr?: ErrorTracker): Nullable<STRING> {
        return this.run<STRING>($$dpth,
            () => {
                let $scope$val: Nullable<string>;
                let $$res: Nullable<STRING> = null;
                if (true
                    && ($scope$val = this.regexAccept(String.raw`(?:[a-zA-Z0-9][a-zA-Z0-9.\s]*)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new STRING($scope$val);
                }
                return $$res;
            });
    }
    public matchINT($$dpth: number, $$cr?: ErrorTracker): Nullable<INT> {
        return this.run<INT>($$dpth,
            () => {
                let $scope$val: Nullable<string>;
                let $$res: Nullable<INT> = null;
                if (true
                    && ($scope$val = this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr)) !== null
                ) {
                    $$res = new INT($scope$val);
                }
                return $$res;
            });
    }
    public matchENDLINE($$dpth: number, $$cr?: ErrorTracker): Nullable<ENDLINE> {
        return this.run<ENDLINE>($$dpth,
            () => {
                let $$res: Nullable<ENDLINE> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.loop<string>(() => this.regexAccept(String.raw`(?:;|\n)`, $$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.ENDLINE, };
                }
                return $$res;
            });
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.loop<string>(() => this.regexAccept(String.raw`(?:\s)`, $$dpth + 1, $$cr), true);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchPROGRAM(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchPROGRAM(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchPROGRAM(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<PROGRAM>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}